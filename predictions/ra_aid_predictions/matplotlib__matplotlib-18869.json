{
    "instance_id": "matplotlib__matplotlib-18869",
    "model_name_or_path": "ra-aid-model",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex a334bf2874..f9a985b43f 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -109,3 +109,4 @@ lib/matplotlib/backends/web_backend/node_modules/\n lib/matplotlib/backends/web_backend/package-lock.json\n \n LICENSE/LICENSE_QHULL\n+.aider*\ndiff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..ef3989b50b 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,8 +130,17 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+def _parse_to_version_info(version_str):\n+    \"\"\"Parse a version string to a tuple of (major, minor, patch, extra).\"\"\"\n+    v = parse_version(version_str)\n+    major = v.major or 0\n+    minor = v.minor or 0\n+    micro = v.micro or 0\n+    extra = '.'.join(str(x) for x in v.release[3:]) if len(v.release) > 3 else ''\n+    return major, minor, micro, extra\n+\n def __getattr__(name):\n-    if name == \"__version__\":\n+    if name in (\"__version__\", \"__version_info__\"):\n         import setuptools_scm\n         global __version__  # cache it.\n         # Only shell out to a git subprocess if really needed, and not on a\n@@ -139,15 +148,19 @@ def __getattr__(name):\n         # a warning from setuptools_scm.\n         root = Path(__file__).resolve().parents[2]\n         if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n-            __version__ = setuptools_scm.get_version(\n+            version = setuptools_scm.get_version(\n                 root=root,\n-                version_scheme=\"post-release\",\n+                version_scheme=\"post-release\", \n                 local_scheme=\"node-and-date\",\n                 fallback_version=_version.version,\n             )\n         else:  # Get the version from the _version.py setuptools_scm file.\n-            __version__ = _version.version\n-        return __version__\n+            version = _version.version\n+            \n+        if name == \"__version__\":\n+            return version\n+        elif name == \"__version_info__\":\n+            return _parse_to_version_info(version)\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \ndiff --git a/lib/matplotlib/tests/test_matplotlib.py b/lib/matplotlib/tests/test_matplotlib.py\nindex cad9433a56..e7ef64fd4b 100644\n--- a/lib/matplotlib/tests/test_matplotlib.py\n+++ b/lib/matplotlib/tests/test_matplotlib.py\n@@ -52,6 +52,23 @@ def test_use_doc_standard_backends():\n             set(matplotlib.rcsetup.non_interactive_bk))\n \n \n+def test_version_info():\n+    \"\"\"Test version info parsing.\"\"\"\n+    import matplotlib\n+    \n+    # Test basic version string\n+    assert matplotlib._parse_to_version_info(\"3.4.1\") == (3, 4, 1, '')\n+    \n+    # Test version with extra\n+    assert matplotlib._parse_to_version_info(\"3.4.1rc1\") == (3, 4, 1, 'rc1')\n+    \n+    # Test dev version\n+    assert matplotlib._parse_to_version_info(\"3.4.1.dev123\") == (3, 4, 1, 'dev123')\n+    \n+    # Verify __version_info__ is accessible\n+    assert len(matplotlib.__version_info__) == 4\n+    assert all(isinstance(x, (int, str)) for x in matplotlib.__version_info__)\n+\n def test_importable_with__OO():\n     \"\"\"\n     When using -OO or export PYTHONOPTIMIZE=2, docstrings are discarded,\n",
    "edited_files": [
        ".gitignore",
        "lib/matplotlib/__init__.py",
        "lib/matplotlib/tests/test_matplotlib.py"
    ],
    "research": "Agent run completed successfully",
    "attempt": 2,
    "timestamp": "2025-01-06T22:52:37.061055",
    "ra_aid_model": "openrouter/deepseek/deepseek-chat",
    "ra_aid_editor": "anthropic/claude-3-5-sonnet-20241022"
}