{
    "instance_id": "django__django-12184",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex 238fb3a200..9870d457d8 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -16,3 +16,4 @@ tests/coverage_html/\n tests/.coverage\n build/\n tests/report/\n+.aider*\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 2d4610aac4..83e038350a 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -155,11 +155,9 @@ class RegexPattern(CheckURLMixin):\n     def match(self, path):\n         match = self.regex.search(path)\n         if match:\n-            # If there are any named groups, use those as kwargs, ignoring\n-            # non-named groups. Otherwise, pass all non-named arguments as\n-            # positional arguments.\n-            kwargs = {k: v for k, v in match.groupdict().items() if v is not None}\n+            kwargs = match.groupdict()\n             args = () if kwargs else match.groups()\n+            # Don't filter out None values for optional parameters\n             return path[match.end():], args, kwargs\n         return None\n \ndiff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 92c4e6399e..0973c66b1b 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -55,18 +55,31 @@ class SimplifiedURLTests(SimpleTestCase):\n         self.assertEqual(match.route, '^regex/(?P<pk>[0-9]+)/$')\n \n     def test_re_path_with_optional_parameter(self):\n-        for url, kwargs in (\n+        test_data = [\n             ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n             ('/regex_optional/1/', {'arg1': '1'}),\n-        ):\n+            # Test nested optional groups\n+            ('/regex_optional/1/2/3/', {'arg1': '1', 'arg2': '2', 'arg3': '3'}),\n+            ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n+            # Test that None is preserved for matched but empty optional groups\n+            ('/regex_optional_empty/1//', {'arg1': '1', 'arg2': None}),\n+            ('/regex_optional_empty/1/', {'arg1': '1'}),\n+        ]\n+        for url, expected_kwargs in test_data:\n             with self.subTest(url=url):\n                 match = resolve(url)\n                 self.assertEqual(match.url_name, 'regex_optional')\n-                self.assertEqual(match.kwargs, kwargs)\n-                self.assertEqual(\n-                    match.route,\n-                    r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n-                )\n+                self.assertEqual(match.kwargs, expected_kwargs)\n+                if 'empty' not in url:\n+                    self.assertEqual(\n+                        match.route,\n+                        r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/(?:(?P<arg3>\\d+)/)?)?',\n+                    )\n+                else:\n+                    self.assertEqual(\n+                        match.route, \n+                        r'^regex_optional_empty/(?P<arg1>\\d+)/(?:(?P<arg2>[^/]*)/)?$'\n+                    )\n \n     def test_path_lookup_with_inclusion(self):\n         match = resolve('/included_urls/extra/something/')",
    "edited_files": [
        ".gitignore",
        "django/urls/resolvers.py",
        "tests/urlpatterns/tests.py"
    ],
    "research": "Agent run completed successfully",
    "attempt": 1
}