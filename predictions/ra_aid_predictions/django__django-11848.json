{
    "instance_id": "django__django-11848",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex 238fb3a200..9870d457d8 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -16,3 +16,4 @@ tests/coverage_html/\n tests/.coverage\n build/\n tests/report/\n+.aider*\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..44f1e18224 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -162,6 +162,11 @@ def parse_http_date(date):\n     The three formats allowed by the RFC are accepted, even if only the first\n     one is still in widespread use.\n \n+    For two-digit years, the century is determined by RFC 7231:\n+    - If the resulting year would be more than 50 years in the future,\n+      subtract 100 years from it.\n+    - Otherwise use the current century.\n+\n     Return an integer expressed in seconds since the epoch, in UTC.\n     \"\"\"\n     # email.utils.parsedate() does the job for RFC1123 dates; unfortunately\n@@ -176,10 +181,17 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            # Get current year and century\n+            current_year = datetime.datetime.now().year\n+            current_century = current_year // 100 * 100\n+            \n+            # Add current century to get full year\n+            full_year = current_century + year\n+            \n+            # If more than 50 years in future, subtract 100 years\n+            if full_year > current_year + 50:\n+                full_year -= 100\n+            year = full_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex bc8bcfe977..a68e7f1cdd 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -324,9 +324,25 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_year_less_than_70(self):\n-        parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n+    def test_parsing_two_digit_years(self):\n+        current_year = datetime.datetime.now().year\n+        current_century = current_year // 100 * 100\n+\n+        # Test year that should stay in current century\n+        two_digit_year = (current_year + 20) % 100\n+        parsed = parse_http_date(f'Sun Nov  6 08:49:37 {two_digit_year:02d}')\n+        self.assertEqual(\n+            datetime.utcfromtimestamp(parsed),\n+            datetime(current_century + two_digit_year, 11, 6, 8, 49, 37)\n+        )\n+\n+        # Test year that should roll back a century\n+        two_digit_year = (current_year + 60) % 100\n+        parsed = parse_http_date(f'Sun Nov  6 08:49:37 {two_digit_year:02d}')\n+        self.assertEqual(\n+            datetime.utcfromtimestamp(parsed),\n+            datetime(current_century + two_digit_year - 100, 11, 6, 8, 49, 37)\n+        )\n \n \n class EscapeLeadingSlashesTests(unittest.TestCase):",
    "edited_files": [
        ".gitignore",
        "django/utils/http.py",
        "tests/utils_tests/test_http.py"
    ],
    "research": "Agent run completed successfully",
    "attempt": 1
}