{
    "instance_id": "mwaskom__seaborn-3010",
    "model_name_or_path": "ra-aid-model",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex c9e7058f..71efe6eb 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -14,3 +14,4 @@ htmlcov/\n .DS_Store\n notes/\n notebooks/\n+.aider*\ndiff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py\nindex 7b7ddc8d..fa1f0034 100644\n--- a/seaborn/_stats/regression.py\n+++ b/seaborn/_stats/regression.py\n@@ -21,12 +21,21 @@ class PolyFit(Stat):\n \n     def _fit_predict(self, data):\n \n-        x = data[\"x\"]\n+        # Get x and y data\n+        x = data[\"x\"] \n         y = data[\"y\"]\n+        \n+        # Drop NaN values\n+        mask = ~x.isna() & ~y.isna()\n+        x = x[mask]\n+        y = y[mask]\n+\n+        # Check if enough unique points after cleaning\n         if x.nunique() <= self.order:\n-            # TODO warn?\n+            # Not enough points for fit\n             xx = yy = []\n         else:\n+            # Fit polynomial only using cleaned data\n             p = np.polyfit(x, y, self.order)\n             xx = np.linspace(x.min(), x.max(), self.gridsize)\n             yy = np.polyval(p, xx)\n@@ -37,7 +46,8 @@ class PolyFit(Stat):\n     # and then only define __call__ on a base-class of stats with this pattern\n \n     def __call__(self, data, groupby, orient, scales):\n-\n+        # Drop rows with missing x or y values before fitting\n+        data = data.dropna(subset=[\"x\", \"y\"])\n         return groupby.apply(data, self._fit_predict)\n \n \ndiff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 7facf75d..aea49ec4 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -4,6 +4,7 @@ import pandas as pd\n \n import pytest\n from numpy.testing import assert_array_equal, assert_array_almost_equal\n+from pandas.testing import assert_frame_equal\n \n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n@@ -50,3 +51,11 @@ class TestPolyFit:\n             grid = np.linspace(part[\"x\"].min(), part[\"x\"].max(), gridsize)\n             assert_array_equal(part[\"x\"], grid)\n             assert part[\"y\"].diff().diff().dropna().abs().gt(0).all()\n+\n+    def test_missing_data(self, df):\n+\n+        groupby = GroupBy([\"group\"])\n+        df.iloc[5:10] = np.nan\n+        res1 = PolyFit()(df[[\"x\", \"y\"]], groupby, \"x\", {})\n+        res2 = PolyFit()(df[[\"x\", \"y\"]].dropna(), groupby, \"x\", {})\n+        assert_frame_equal(res1, res2)\n\n",
    "edited_files": [
        ".gitignore",
        "seaborn/_stats/regression.py",
        "tests/_stats/test_regression.py"
    ],
    "research": null,
    "attempt": 1,
    "timestamp": "2025-01-09T12:39:50.563258",
    "ra_aid_model": "openrouter/deepseek/deepseek-chat",
    "ra_aid_editor": "openrouter/deepseek/deepseek-chat"
}