{
    "instance_id": "django__django-12113",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex 238fb3a200..9870d457d8 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -16,3 +16,4 @@ tests/coverage_html/\n tests/.coverage\n build/\n tests/report/\n+.aider*\ndiff --git a/django/db/backends/sqlite3/creation.py b/django/db/backends/sqlite3/creation.py\nindex d97052f52d..81a1cd88ec 100644\n--- a/django/db/backends/sqlite3/creation.py\n+++ b/django/db/backends/sqlite3/creation.py\n@@ -97,5 +97,10 @@ class DatabaseCreation(BaseDatabaseCreation):\n         test_database_name = self._get_test_db_name()\n         sig = [self.connection.settings_dict['NAME']]\n         if self.is_in_memory_db(test_database_name):\n+            # For in-memory databases, include the connection alias to identify \n+            # the distinct database instance\n             sig.append(self.connection.alias)\n+        else:\n+            # For persistent databases, include the test database name\n+            sig.append(test_database_name)\n         return tuple(sig)\ndiff --git a/tests/backends/sqlite/test_creation.py b/tests/backends/sqlite/test_creation.py\nnew file mode 100644\nindex 0000000000..6293c71c3c\n--- /dev/null\n+++ b/tests/backends/sqlite/test_creation.py\n@@ -0,0 +1,77 @@\n+import unittest\n+from unittest import mock\n+\n+from django.db import connection\n+from django.db.backends.sqlite3.creation import DatabaseCreation\n+from django.test import SimpleTestCase\n+\n+\n+class TestDbSignature(SimpleTestCase):\n+    def setUp(self):\n+        self.creation = DatabaseCreation(connection)\n+\n+    def test_signature_persistent_db(self):\n+        \"\"\"\n+        test_db_signature() includes the test database name in its signature\n+        for persistent (non-memory) databases.\n+        \"\"\"\n+        database_name = 'file:persistent.db'\n+        settings = {\n+            'NAME': database_name,\n+        }\n+        with mock.patch.dict(connection.settings_dict, settings):\n+            test_name = 'file:test.db'\n+            with mock.patch.object(self.creation, '_get_test_db_name', return_value=test_name):\n+                signature = self.creation.test_db_signature()\n+                self.assertEqual(signature, (database_name, test_name))\n+\n+    def test_signature_in_memory_db(self):\n+        \"\"\"\n+        test_db_signature() includes the connection alias in its signature\n+        for in-memory databases.\n+        \"\"\"\n+        database_name = ':memory:'\n+        alias = 'default'\n+        settings = {\n+            'NAME': database_name,\n+        }\n+        with mock.patch.dict(connection.settings_dict, settings), \\\n+             mock.patch.object(connection, 'alias', alias):\n+            signature = self.creation.test_db_signature()\n+            self.assertEqual(signature, (database_name, alias))\n+\n+    def test_signature_different_persistent_dbs(self):\n+        \"\"\"\n+        Different persistent test databases produce different signatures.\n+        \"\"\"\n+        database_name = 'file:persistent.db'\n+        settings = {\n+            'NAME': database_name,\n+        }\n+        with mock.patch.dict(connection.settings_dict, settings):\n+            test_name1 = 'file:test1.db'\n+            test_name2 = 'file:test2.db'\n+            \n+            with mock.patch.object(self.creation, '_get_test_db_name', return_value=test_name1):\n+                sig1 = self.creation.test_db_signature()\n+            \n+            with mock.patch.object(self.creation, '_get_test_db_name', return_value=test_name2):\n+                sig2 = self.creation.test_db_signature()\n+\n+            self.assertNotEqual(sig1, sig2)\n+\n+    def test_signature_different_in_memory_dbs(self):\n+        \"\"\"\n+        Different in-memory test databases produce different signatures.\n+        \"\"\"\n+        database_name = ':memory:'\n+        settings = {\n+            'NAME': database_name,\n+        }\n+        with mock.patch.dict(connection.settings_dict, settings):\n+            with mock.patch.object(connection, 'alias', 'default1'):\n+                sig1 = self.creation.test_db_signature()\n+            with mock.patch.object(connection, 'alias', 'default2'):\n+                sig2 = self.creation.test_db_signature()\n+            \n+            self.assertNotEqual(sig1, sig2)",
    "edited_files": [
        ".gitignore",
        "django/db/backends/sqlite3/creation.py",
        "tests/backends/sqlite/test_creation.py"
    ],
    "research": "Agent run completed successfully",
    "attempt": 1
}