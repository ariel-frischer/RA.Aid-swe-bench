{
    "instance_id": "django__django-14155",
    "model_name_or_path": "ra-aid-model",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex 238fb3a200..9870d457d8 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -16,3 +16,4 @@ tests/coverage_html/\n tests/.coverage\n build/\n tests/report/\n+.aider*\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..811db76388 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -6,6 +6,7 @@ a string) and returns a ResolverMatch object which provides access to all\n attributes of the resolved URL match.\n \"\"\"\n import functools\n+from functools import partial, wraps\n import inspect\n import re\n import string\n@@ -31,9 +32,22 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n+        # Handle functools.partial objects while preserving original function\n+        self._original_func = func\n+        if isinstance(func, partial):\n+            self._partial = func\n+            self._partial_args = func.args\n+            self._partial_kwargs = func.keywords or {}\n+            func = func.func\n+        else:\n+            self._partial = None\n+            self._partial_args = ()\n+            self._partial_kwargs = {}\n+\n         self.func = func\n-        self.args = args\n-        self.kwargs = kwargs\n+        # Combine partial args/kwargs with provided args/kwargs\n+        self.args = self._partial_args + args\n+        self.kwargs = {**self._partial_kwargs, **kwargs}\n         self.url_name = url_name\n         self.route = route\n         self.tried = tried\n@@ -58,9 +72,25 @@ class ResolverMatch:\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n \n+    @property\n+    def original_func(self):\n+        \"\"\"Return the original function, preserving any partial wrapper.\"\"\"\n+        return self._original_func\n+\n     def __repr__(self):\n+        # Handle both partial and non-partial cases consistently\n+        func_path = self._func_path\n+        if self._partial:\n+            partial_info = []\n+            if self._partial.args:\n+                partial_info.append(f\"args={self._partial.args}\")\n+            if self._partial.keywords:\n+                partial_info.append(f\"kwargs={self._partial.keywords}\")\n+            partial_str = \" (partial with \" + \", \".join(partial_info) + \")\" if partial_info else \" (partial)\"\n+            func_path += partial_str\n+            \n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_path, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n",
    "edited_files": [
        ".gitignore",
        "django/urls/resolvers.py"
    ],
    "research": null,
    "attempt": 1,
    "timestamp": "2025-01-10T09:25:30.126770",
    "ra_aid_model": "openrouter/deepseek/deepseek-chat",
    "ra_aid_editor": "openrouter/deepseek/deepseek-chat",
    "is_winner": true,
    "trajectory_file": "/home/ari/repos/swe-lite-raid/predictions/ra_aid_predictions/traj_django__django-14155_attempt1_20250110-092530.txt"
}