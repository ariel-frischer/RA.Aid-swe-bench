{
    "instance_id": "sympy__sympy-16106",
    "model_name_or_path": "ra-aid-model",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex fdcc1cabf1..f0e39d5f84 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -74,3 +74,4 @@ sample.tex\n \n # pytest related data file for slow tests\n .ci/durations.log\n+.aider*\ndiff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 1aa0ee01a2..3982bc12d4 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -477,6 +477,25 @@ def _print_int(self, p):\n         dom_element.appendChild(self.dom.createTextNode(str(p)))\n         return dom_element\n \n+    def _print_IndexedBase(self, ib):\n+        \"\"\"Print IndexedBase object\"\"\"\n+        return self._print(ib.label)\n+\n+    def _print_Indexed(self, expr):\n+        \"\"\"Print Indexed object with subscripts\"\"\"\n+        msub = self.dom.createElement('msub')\n+        msub.appendChild(self._print(expr.base))\n+        \n+        if len(expr.indices) == 1:\n+            msub.appendChild(self._print(expr.indices[0]))\n+        else:\n+            mrow = self.dom.createElement('mrow')\n+            for idx in expr.indices:\n+                mrow.appendChild(self._print(idx))\n+            msub.appendChild(mrow)\n+            \n+        return msub\n+\n \n class MathMLPresentationPrinter(MathMLPrinterBase):\n     \"\"\"Prints an expression to the Presentation MathML markup language.\ndiff --git a/sympy/printing/tests/test_mathml.py b/sympy/printing/tests/test_mathml.py\nindex 74e09fb2b5..479094e3e5 100644\n--- a/sympy/printing/tests/test_mathml.py\n+++ b/sympy/printing/tests/test_mathml.py\n@@ -1121,6 +1121,27 @@ def test_print_Lambda():\n     expr = Lambda((x, y), x + y)\n     assert mathml(expr, printer='presentation') == '<mfenced><mrow><mrow><mfenced><mi>x</mi><mi>y</mi></mfenced></mrow><mo>&#x21A6;</mo><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow></mrow></mfenced>'\n \n+def test_print_IndexedBase():\n+    from sympy.tensor import IndexedBase\n+    A = IndexedBase('A')\n+    assert mathml(A, printer='content') == '<ci>A</ci>'\n+    assert mathml(A, printer='presentation') == '<mi>A</mi>'\n+\n+def test_print_Indexed():\n+    from sympy.tensor import IndexedBase, Idx\n+    A = IndexedBase('A')\n+    i, j = map(Idx, ['i', 'j'])\n+    \n+    # Single index\n+    expr = A[i]\n+    assert mathml(expr, printer='content') == '<msub><ci>A</ci><ci>i</ci></msub>'\n+    assert mathml(expr, printer='presentation') == '<msub><mi>A</mi><mi>i</mi></msub>'\n+    \n+    # Multiple indices\n+    expr = A[i, j]\n+    assert mathml(expr, printer='content') == '<msub><ci>A</ci><mrow><ci>i</ci><ci>j</ci></mrow></msub>'\n+    assert mathml(expr, printer='presentation') == '<msub><mi>A</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub>'\n+\n \n def test_print_conjugate():\n     assert mpp.doprint(conjugate(x)) == '<menclose notation=\"top\"><mi>x</mi></menclose>'\n",
    "edited_files": [
        ".gitignore",
        "sympy/printing/mathml.py",
        "sympy/printing/tests/test_mathml.py"
    ],
    "research": "Agent run completed successfully",
    "attempt": 1,
    "timestamp": "2025-01-08T16:00:21.479671",
    "ra_aid_model": "openrouter/deepseek/deepseek-chat",
    "ra_aid_editor": "openrouter/deepseek/deepseek-chat"
}