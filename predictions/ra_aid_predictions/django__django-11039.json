{
    "instance_id": "django__django-11039",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex 238fb3a200..9870d457d8 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -16,3 +16,4 @@ tests/coverage_html/\n tests/.coverage\n build/\n tests/report/\n+.aider*\ndiff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex f0b663222a..4222e4e874 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -55,8 +55,9 @@ class Command(BaseCommand):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output only for atomic migrations on DBs that support transactional DDL.\n+        # Both conditions must be true to enable transaction output.\n+        self.output_transaction = bool(migration.atomic and connection.features.can_rollback_ddl)\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\ndiff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex 0e8fa9fdd1..fe7b695a45 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -606,16 +606,42 @@ class MigrateTests(MigrationTestBase):\n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_non_atomic\"})\n     def test_sqlmigrate_for_non_atomic_migration(self):\n         \"\"\"\n-        Transaction wrappers aren't shown for non-atomic migrations.\n+        Transaction wrappers aren't shown for:\n+        - non-atomic migrations\n+        - databases that don't support transactional DDL\n+        Both conditions must be true for transaction wrappers to be shown.\n         \"\"\"\n         out = io.StringIO()\n-        call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n+        # Test when DDL cannot be rolled back\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n         output = out.getvalue().lower()\n         queries = [q.strip() for q in output.splitlines()]\n         if connection.ops.start_transaction_sql():\n             self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)\n         self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n \n+        # Test non-atomic migrations\n+        out = io.StringIO()\n+        with mock.patch('django.db.migrations.migration.Migration.atomic', False):\n+            call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        if connection.ops.start_transaction_sql():\n+            self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n+        # Test when both conditions are true - should show transactions\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', True):\n+            with mock.patch('django.db.migrations.migration.Migration.atomic', True):\n+                call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        if connection.ops.start_transaction_sql():\n+            self.assertIn(connection.ops.start_transaction_sql().lower(), queries)\n+            self.assertIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"migrations.migrations_test_apps.migrated_app\",",
    "edited_files": [
        ".gitignore",
        "django/core/management/commands/sqlmigrate.py",
        "tests/migrations/test_commands.py"
    ],
    "research": "Agent run completed successfully",
    "attempt": 2,
    "model_name_or_path": "ra-aid-model",
    "timestamp": "2025-01-06T17:46:09.984494",
    "ra_aid_model": "openrouter/deepseek/deepseek-chat",
    "ra_aid_editor": "anthropic/claude-3-5-sonnet-20241022"
}