{
    "instance_id": "django__django-11630",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex 238fb3a200..9870d457d8 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -16,3 +16,4 @@ tests/coverage_html/\n tests/.coverage\n build/\n tests/report/\n+.aider*\ndiff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..4fc85d54cd 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -4,7 +4,8 @@ from collections import defaultdict\n from itertools import chain\n \n from django.apps import apps\n-from django.core.checks import Error, Tags, register\n+from django.conf import settings\n+from django.core.checks import Error, Tags, Warning, register\n \n \n @register(Tags.models)\n@@ -37,14 +38,26 @@ def check_all_models(app_configs=None, **kwargs):\n             constraints[model_constraint.name].append(model._meta.label)\n     for db_table, model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n-                )\n+            message = \"db_table '%s' is used by multiple models: %s.\" % (\n+                db_table, ', '.join(db_table_models[db_table])\n             )\n+            if hasattr(settings, 'DATABASE_ROUTERS') and settings.DATABASE_ROUTERS:\n+                errors.append(\n+                    Warning(\n+                        message,\n+                        hint='Verify that your DATABASE_ROUTERS setting is configured correctly for this model relationship.',\n+                        obj=db_table,\n+                        id='models.W028',\n+                    )\n+                )\n+            else:\n+                errors.append(\n+                    Error(\n+                        message,\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n+                )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\ndiff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 79177e38f7..820ba1a3ce 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -3,14 +3,14 @@ from django.core.checks import Error\n from django.db import models\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n-    isolate_apps, modify_settings, override_system_checks,\n+    isolate_apps, modify_settings, override_settings, override_system_checks,\n )\n \n \n @isolate_apps('check_framework', attr_name='apps')\n @override_system_checks([checks.model_checks.check_all_models])\n class DuplicateDBTableTests(SimpleTestCase):\n-    def test_collision_in_same_app(self):\n+    def test_collision_in_same_app_no_router(self):\n         class Model1(models.Model):\n             class Meta:\n                 db_table = 'test_table'\n@@ -19,7 +19,8 @@ class DuplicateDBTableTests(SimpleTestCase):\n             class Meta:\n                 db_table = 'test_table'\n \n-        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n             Error(\n                 \"db_table 'test_table' is used by multiple models: \"\n                 \"check_framework.Model1, check_framework.Model2.\",\n@@ -28,6 +29,27 @@ class DuplicateDBTableTests(SimpleTestCase):\n             )\n         ])\n \n+    @override_settings(DATABASE_ROUTERS=['path.to.MyRouter'])\n+    def test_collision_in_same_app_with_router(self):\n+        class Model1(models.Model):\n+            class Meta:\n+                db_table = 'test_table'\n+\n+        class Model2(models.Model):\n+            class Meta:\n+                db_table = 'test_table'\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            Warning(\n+                \"db_table 'test_table' is used by multiple models: \"\n+                \"check_framework.Model1, check_framework.Model2.\",\n+                hint='Verify that your DATABASE_ROUTERS setting is configured correctly for this model relationship.',\n+                obj='test_table',\n+                id='models.W028',\n+            )\n+        ])\n+\n     @modify_settings(INSTALLED_APPS={'append': 'basic'})\n     @isolate_apps('basic', 'check_framework', kwarg_name='apps')\n     def test_collision_across_apps(self, apps):",
    "edited_files": [
        ".gitignore",
        "django/core/checks/model_checks.py",
        "tests/check_framework/test_model_checks.py"
    ],
    "research": "Agent run completed successfully",
    "attempt": 3
}