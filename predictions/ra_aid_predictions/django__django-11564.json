{
    "instance_id": "django__django-11564",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex 238fb3a200..9870d457d8 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -16,3 +16,4 @@ tests/coverage_html/\n tests/.coverage\n build/\n tests/report/\n+.aider*\ndiff --git a/django/conf/__init__.py b/django/conf/__init__.py\nindex b32e56184d..101e2796f3 100644\n--- a/django/conf/__init__.py\n+++ b/django/conf/__init__.py\n@@ -16,8 +16,11 @@ from pathlib import Path\n import django\n from django.conf import global_settings\n from django.core.exceptions import ImproperlyConfigured\n+from django.core.validators import URLValidator\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.functional import LazyObject, empty\n+from django.utils.http import is_same_domain\n+from django.utils.module_loading import import_string\n \n ENVIRONMENT_VARIABLE = \"DJANGO_SETTINGS_MODULE\"\n \n@@ -130,6 +133,17 @@ class LazySettings(LazyObject):\n \n \n class Settings:\n+    @staticmethod\n+    def _add_script_prefix(value):\n+        if not value:\n+            return value\n+        if value.startswith(('http://', 'https://', '//')):\n+            return value\n+        if value.startswith('/'):\n+            return value\n+        from django.urls import get_script_prefix\n+        return get_script_prefix() + value\n+\n     def __init__(self, settings_module):\n         # update this dict from global settings (but only for ALL_CAPS settings)\n         for setting in dir(global_settings):\n@@ -184,6 +198,14 @@ class Settings:\n     def is_overridden(self, setting):\n         return setting in self._explicit_settings\n \n+    @property\n+    def STATIC_URL(self):\n+        return self._add_script_prefix(self.__getattr__('STATIC_URL'))\n+\n+    @property\n+    def MEDIA_URL(self):\n+        return self._add_script_prefix(self.__getattr__('MEDIA_URL'))\n+\n     def __repr__(self):\n         return '<%(cls)s \"%(settings_module)s\">' % {\n             'cls': self.__class__.__name__,\ndiff --git a/tests/settings_tests/tests.py b/tests/settings_tests/tests.py\nindex d663f6e819..332aeacf20 100644\n--- a/tests/settings_tests/tests.py\n+++ b/tests/settings_tests/tests.py\n@@ -11,6 +11,7 @@ from django.test import (\n     SimpleTestCase, TestCase, TransactionTestCase, modify_settings,\n     override_settings, signals,\n )\n+from django.urls import clear_script_prefix, get_script_prefix, set_script_prefix\n from django.test.utils import requires_tz_support\n \n \n@@ -441,6 +442,61 @@ class IsOverriddenTest(SimpleTestCase):\n         self.assertEqual(repr(lazy_settings), expected)\n \n \n+class MediaURLStaticURLPrefixTest(SimpleTestCase):\n+    def setUp(self):\n+        self._original_script_prefix = get_script_prefix()\n+        clear_script_prefix()\n+\n+    def tearDown(self):\n+        clear_script_prefix()\n+        set_script_prefix(self._original_script_prefix)\n+\n+    def set_script_name(self, script_name):\n+        set_script_prefix(script_name)\n+\n+    def test_not_prefixed(self):\n+        \"\"\"\n+        STATIC_URL and MEDIA_URL should not be prefixed if they contain a full URL\n+        or are empty/None.\n+        \"\"\"\n+        tests = (\n+            'http://example.com/path/',\n+            'https://example.com/path/',\n+            '//example.com/path/',\n+            '/path/',\n+            '',\n+            None,\n+        )\n+        for script_name in ('/somesite', '/somesite/'):\n+            with self.subTest(script_name=script_name):\n+                self.set_script_name(script_name)\n+                for url in tests:\n+                    with self.subTest(url=url):\n+                        with override_settings(STATIC_URL=url):\n+                            self.assertEqual(settings.STATIC_URL, url)\n+                        with override_settings(MEDIA_URL=url):\n+                            self.assertEqual(settings.MEDIA_URL, url)\n+\n+    def test_add_script_name_prefix(self):\n+        \"\"\"\n+        STATIC_URL and MEDIA_URL should be prefixed with SCRIPT_NAME if they are\n+        relative paths.\n+        \"\"\"\n+        tests = (\n+            ('foo/', '/somesite/foo/'),\n+            ('foo', '/somesite/foo'),\n+        )\n+        for script_name in ('/somesite', '/somesite/'):\n+            with self.subTest(script_name=script_name):\n+                self.set_script_name(script_name)\n+                for url, expected in tests:\n+                    with self.subTest(url=url):\n+                        with override_settings(STATIC_URL=url):\n+                            self.assertEqual(settings.STATIC_URL, expected)\n+                        with override_settings(MEDIA_URL=url):\n+                            self.assertEqual(settings.MEDIA_URL, expected)\n+\n+\n class TestListSettings(unittest.TestCase):\n     \"\"\"\n     Make sure settings that should be lists or tuples throw",
    "edited_files": [
        ".gitignore",
        "django/conf/__init__.py",
        "tests/settings_tests/tests.py"
    ],
    "research": "Agent run completed successfully",
    "attempt": 3,
    "model_name_or_path": "ra-aid-model",
    "timestamp": "2025-01-06T17:46:09.984909",
    "ra_aid_model": "openrouter/deepseek/deepseek-chat",
    "ra_aid_editor": "anthropic/claude-3-5-sonnet-20241022"
}