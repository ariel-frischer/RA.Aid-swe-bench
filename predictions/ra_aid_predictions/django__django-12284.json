{
    "instance_id": "django__django-12284",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex 238fb3a200..9870d457d8 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -16,3 +16,4 @@ tests/coverage_html/\n tests/.coverage\n build/\n tests/report/\n+.aider*\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 1a55d3d417..cd111c7b4b 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -763,13 +763,12 @@ class Field(RegisterLookupMixin):\n             # such fields can't be deferred (we don't have a check for this).\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n-        if self.choices is not None:\n-            if not hasattr(cls, 'get_%s_display' % self.name):\n-                setattr(\n-                    cls,\n-                    'get_%s_display' % self.name,\n-                    partialmethod(cls._get_FIELD_display, field=self),\n-                )\n+        if self.choices is not None and not hasattr(cls, 'get_%s_display' % self.name):\n+            setattr(\n+                cls,\n+                'get_%s_display' % self.name,\n+                partialmethod(cls._get_FIELD_display, field=self),\n+            )\n \n     def get_filter_kwargs_for_object(self, obj):\n         \"\"\"\ndiff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a3b805409c..61306e2c2e 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -80,6 +80,34 @@ class BasicFieldTests(SimpleTestCase):\n         f = Foo._meta.get_field('a')\n         self.assertEqual(str(f), 'model_fields.Foo.a')\n \n+    def test_custom_display_method(self):\n+        class CustomDisplayModel(models.Model):\n+            CHOICES = [\n+                (1, 'First'),\n+                (2, 'Second'),\n+            ]\n+            field = models.IntegerField(choices=CHOICES)\n+\n+            def get_field_display(self):\n+                return 'Custom Display'\n+\n+        obj = CustomDisplayModel(field=1)\n+        self.assertEqual(obj.get_field_display(), 'Custom Display')\n+\n+    def test_inherited_choices_display(self):\n+        class ParentModel(models.Model):\n+            CHOICES = [\n+                (1, 'First'),\n+                (2, 'Second'),\n+            ]\n+            field = models.IntegerField(choices=CHOICES)\n+\n+        class ChildModel(ParentModel):\n+            pass\n+\n+        obj = ChildModel(field=1)\n+        self.assertEqual(obj.get_field_display(), 'First')\n+\n     def test_field_ordering(self):\n         \"\"\"Fields are ordered based on their creation.\"\"\"\n         f1 = models.Field()",
    "edited_files": [
        ".gitignore",
        "django/db/models/fields/__init__.py",
        "tests/model_fields/tests.py"
    ],
    "research": "Agent run completed successfully",
    "attempt": 1,
    "model_name_or_path": "ra-aid-model",
    "timestamp": "2025-01-06T17:46:09.985476",
    "ra_aid_model": "openrouter/deepseek/deepseek-chat",
    "ra_aid_editor": "anthropic/claude-3-5-sonnet-20241022"
}