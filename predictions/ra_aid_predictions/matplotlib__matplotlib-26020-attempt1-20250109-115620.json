{
    "instance_id": "matplotlib__matplotlib-26020",
    "model_name_or_path": "ra-aid-model",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex 74080f6c50..98c897f58a 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -110,3 +110,4 @@ lib/matplotlib/backends/web_backend/node_modules/\n lib/matplotlib/backends/web_backend/package-lock.json\n \n LICENSE/LICENSE_QHULL\n+.aider*\ndiff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..644a2a44b8 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -1,5 +1,7 @@\n from numbers import Number\n import functools\n+from types import MethodType\n+from types import MethodType\n \n import numpy as np\n \n@@ -13,8 +15,21 @@ from .mpl_axes import Axes\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    # Handle both MethodType axis (standard Axes) and dict-like axis\n+    if isinstance(ax.axis, MethodType):\n+        # Standard Axes case\n+        ax.tick_params(bottom=bottom_on, labelbottom=bottom_on,\n+                      left=left_on, labelleft=left_on)\n+    else:\n+        # Dict-like axis case\n+        if hasattr(ax.axis, \"__getitem__\"):\n+            ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+            ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+        else:\n+            # Fallback for non-overriding axis classes\n+            ax.tick_params(bottom=bottom_on, labelbottom=bottom_on,\n+                          left=left_on, labelleft=left_on)\n \n \n class CbarAxesBase:\ndiff --git a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\nindex d1554020cd..53406fb5b7 100644\n--- a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n+++ b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n@@ -740,6 +740,49 @@ def test_imagegrid():\n     assert isinstance(cb.locator, mticker.LogLocator)\n \n \n+def test_grid_with_axes_class_not_overriding_axis():\n+    \"\"\"Test Grid works with Axes classes that don't override axis property\"\"\"\n+    fig = plt.figure()\n+    \n+    # Create Grid with standard Axes class\n+    grid = Grid(fig, 111, nrows_ncols=(2, 2), axes_class=plt.Axes)\n+    \n+    # Verify tick handling works\n+    for ax in grid:\n+        ax.plot([0, 1], [0, 1])\n+        ax.set_xticks([0.2, 0.8])\n+        ax.set_yticks([0.2, 0.8])\n+    \n+    # Test label modes\n+    grid.set_label_mode(\"L\")\n+    grid.set_label_mode(\"1\")\n+    grid.set_label_mode(\"all\")\n+    \n+    # Verify no errors occurred\n+    fig.canvas.draw()\n+\n+def test_grid_with_axes_class_not_overriding_axis():\n+    \"\"\"Test Grid works with Axes classes that don't override axis property\"\"\"\n+    fig = plt.figure()\n+    \n+    # Create Grid with standard Axes class\n+    grid = Grid(fig, 111, nrows_ncols=(2, 2), axes_class=plt.Axes)\n+    \n+    # Verify tick handling works\n+    for ax in grid:\n+        ax.plot([0, 1], [0, 1])\n+        ax.set_xticks([0.2, 0.8])\n+        ax.set_yticks([0.2, 0.8])\n+    \n+    # Test label modes\n+    grid.set_label_mode(\"L\")\n+    grid.set_label_mode(\"1\")\n+    grid.set_label_mode(\"all\")\n+    \n+    # Verify no errors occurred\n+    fig.canvas.draw()\n+\n+\n def test_removal():\n     import matplotlib.pyplot as plt\n     import mpl_toolkits.axisartist as AA\n",
    "edited_files": [
        ".gitignore",
        "lib/mpl_toolkits/axes_grid1/axes_grid.py",
        "lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py"
    ],
    "research": "Agent run completed successfully",
    "attempt": 1,
    "timestamp": "2025-01-09T11:56:20.473179",
    "ra_aid_model": "openrouter/deepseek/deepseek-chat",
    "ra_aid_editor": "openrouter/deepseek/deepseek-chat"
}